<!-- マップ描画 -->
<div id="map-wrapper" class="w-full">
  <div id='main-map' style="height: 100%"></div>
</div>

<!-- マップに入れるHTML -->
<div id="init-position" class="map-btn mt-3 mb-1 ml-3 text-lg">全体</div>
<div id="location-button" class="map-btn m-3 text-lg">現在地</div>
<a href="/map" id="reload-button" class="map-btn inline-block m-3 text-base">表示を切換える(ランダム)</a>
<div class="hidden">
  <%= render 'map_microposts', microposts: @microposts %>
</div>

<!-- データ（非表示） -->
<div id="latlngs-data" data-latlngs="<%= @microposts.pluck(:latlng).to_json %>"></div>
<div id="ids-data" data-ids="<%= @microposts.pluck(:id).to_json %>"></div>



<script>
function mainMap() {
  // フッターの有無(width:1024px)によって地図サイズ変更
  const map_wrapper = document.getElementById('map-wrapper');
  if (window.matchMedia('(max-width: 1023px)').matches) {
    map_wrapper.style.height = "calc(100vh - 104px)";
  } else if (window.matchMedia('(min-width:1024px)').matches) {
    map_wrapper.style.height = "calc(100vh - 56px)";
  }


  // ビューに書き込んだmicropost情報を取得
  const ids_data = document.getElementById('ids-data');
  const ids_array = JSON.parse(ids_data.getAttribute('data-ids'));
  const latlngs_data = document.getElementById('latlngs-data');
  const str_latlngs_array = JSON.parse(latlngs_data.getAttribute('data-latlngs'));
  const latlngs_array = [];


  // railsに保存してあるString型のlatlngをNumber型の配列に変換
  function latlngToNumber(micropost_latlng) {
    const ll = micropost_latlng.replace(/\(/g, '').replace(/\)/g, '');
    const latlng = [Number(ll.split(',')[0]), Number(ll.split(',')[1])];
    return latlng;
  }
  for( key in str_latlngs_array ) {
    latlngs_array.push( latlngToNumber(str_latlngs_array[key]) );
  }


  // マップ表示
  const target = document.getElementById('main-map');
  const init_center = {lat: 38, lng: 138};
  const map = new google.maps.Map(target, {
    center: init_center,
    zoom: 5,
    zoomControl: false,
    mapTypeControl: false,
    streetViewControl: false,
    mapTypeControlOptions: {
      style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
    },
    restriction: {
      latLngBounds: {
        north: 65.0,
        south: 18.0,
        west: 100.0,
        east: 180.0
      },
      strictBounds: false
    },
  });


  // ピンとinfoWindow設定
  const latLngs = [];
  const markers = [];
  const infoWindows = [];
  let bottom_size = 0;
  latlngs_array.forEach( (latlng, i) => {
    latLngs[i] = { lat: latlng[0], lng: latlng[1] }
    markers[i] = new google.maps.Marker({
      position: latLngs[i],
      map: map
    });
    infoWindows[i] = new google.maps.InfoWindow({
      content: document.getElementById(`micropost-${ids_array[i]}`).innerHTML,
      maxWidth: 330,
      disableAutoPan: true
    });
    markers[i].addListener('click', ()=> {
      for ( infoWindow of infoWindows ) {
        infoWindow.close();
      }
      map.panTo(latLngs[i]);
      if (window.matchMedia('(max-width: 767px)').matches) {
        bottom_size = -250;
      } else if (window.matchMedia('(min-width:768px)').matches) {
        bottom_size = -300;
      }
      map.panBy(0, bottom_size);
      infoWindows[i].open(map, markers[i]);
    });
    // ピンをダブルクリック右クリックで拡大
    markers[i].addListener('rightclick', ()=> {
      map.panTo(latLngs[i]);
      map.setZoom(10);
    });
    markers[i].addListener('dblclick', ()=> {
      map.panTo(latLngs[i]);
      map.setZoom(10);
    });
  });
  map.addListener('click', ()=> {
    for ( infoWindow of infoWindows ) {
      infoWindow.close();
    }
  });


  // リロードボタン設定
  const reloadButton = document.getElementById('reload-button');
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(reloadButton);


  // 全体ボタン設定
  // 宣言
  function initPosition(pushIntoMap, position) {
    const init_position = document.getElementById('init-position');
    pushIntoMap(position, init_position);
    google.maps.event.addDomListener(init_position, 'click', ()=> {
      map.panTo(init_center);
      map.setZoom(5);
      for ( infoWindow of infoWindows ) {
        infoWindow.close();
      }
    });
  }
  const pushIntoMap = function (position, init_position) {
    if (position === 'left') {
      map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(init_position);
    } else if (position === 'top') {
      map.controls[google.maps.ControlPosition.TOP].push(init_position);
    }
  }
  // 実行
  if (window.matchMedia('(max-width: 767px)').matches) {
    initPosition(pushIntoMap, 'left');
  } else if (window.matchMedia('(min-width:768px)').matches) {
    initPosition(pushIntoMap, 'top');
  }



  // 現在地ボタン設定
  const locationButton = document.getElementById('location-button');
  map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(locationButton);
  new locationControl(locationButton, map);

  function locationControl(buttonDiv, map) {
    google.maps.event.addDomListener(buttonDiv, "click", function() {
      const infoWindow = new google.maps.InfoWindow; 
      
      // ブラウザが Geolocation に対応しているかを判定
      // 対応していない場合の処理
      if(!navigator.geolocation){ 
        infoWindow.setPosition(map.getCenter());
        infoWindow.setContent('Geolocation に対応していません。');
        infoWindow.open(map);
      }
      
      // ブラウザが対応している場合、position にユーザーの位置情報が入る
      navigator.geolocation.getCurrentPosition(
        
        // [第1引数] 取得に成功した場合の関数
        function(position) { 
        let pos = {  
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        };
        infoWindow.setPosition(pos);
        infoWindow.setContent('現在位置を取得しました。');
        infoWindow.open(map);
        map.setCenter(pos);
        map.setZoom(12);
      }, 
      
      // [第2引数] 取得に失敗した場合の関数
      function(error) {

        let errorInfo = [
          "原因不明のエラーが発生しました。" ,
          "位置情報の取得が許可されませんでした。" ,
          "電波状況などで位置情報が取得できませんでした。" ,
          "位置情報の取得に時間がかかり過ぎてタイムアウトしました。"
        ];
        let errorNo = error.code ;
        let errorMessage = "[エラー番号: " + errorNo + "]\n" + errorInfo[ errorNo ] ;
        alert( errorMessage ) ;
      },

      // [第3引数] オプション
      {
        "enableHighAccuracy": false,
        "timeout": 4000,
        "maximumAge": 2000,
      });
    });
  }
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?language=ja&region=JP&key=AIzaSyCIX7ci0yBU4r9axzQEvNd5nefZiifw1bM&libraries=places&callback=mainMap" async defer></script>