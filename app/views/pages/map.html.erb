<div class="w-full h-smartphone-screen lg:h-pc-screen">
  <div id='main-map' style="height: 100%"></div>
</div>
<div id="latlngs-data" data-latlngs="<%= @microposts_for_map.pluck(:latlng).to_json %>"></div>
<div id="ids-data" data-ids="<%= @microposts_for_map.pluck(:id).to_json %>"></div>
<input id="autocomplete" size="50" class="mt-4 ml-4 h-6 w-48 text-base rounded-sm shadow" type="search" placeholder="検索" />
<div id="set-init" class="w-10 h-5 text-center bg-white cursor-pointer">全体</div>
<div id="location-button" class="bg-white cursor-pointer">現在地</div>
<%= @microposts_for_map.ids %>
<%= @microposts_for_map.pluck(:id) %>
<%= @microposts_for_map.pluck(:latlng) %>
<div class="hidden">
<%= render 'microposts/microposts', microposts: @microposts_for_map %>
</div>


<script>
function mainMap(){
  // ビューに書き込んだmicropost情報を取得
  const ids_data = document.getElementById('ids-data');
  const idsArray = JSON.parse(ids_data.getAttribute('data-ids'));
  const latlngs_data = document.getElementById('latlngs-data');
  const strLatlngsArray = JSON.parse(latlngs_data.getAttribute('data-latlngs'));
  const latlngsArray = [];

  // railsに保存してあるstring型のlatlngをNumber型の配列に変換
  function latlngToNumber(micropost_latlng) {
    const ll = micropost_latlng.replace(/\(/g, '').replace(/\)/g, '');
    const latlng = [Number(ll.split(',')[0]), Number(ll.split(',')[1])];
    return latlng;
  }
  for( key in strLatlngsArray ) {
    latlngsArray.push( latlngToNumber(strLatlngsArray[key]) );
  }

  // マップ表示
  const target = document.getElementById('main-map');
  const init_center = {lat: 37, lng: 140};
  const main_map = new google.maps.Map(target, {
    center: init_center,
    zoom: 5,
    zoomControl: false,
    mapTypeControl: false,
    streetViewControl: false,
    mapTypeControlOptions: {
      style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
    },
    restriction: {
      latLngBounds: {
        north: 55.0,
        south: 20.0,
        west: 110.0,
        east: 170.0
      },
      strictBounds: false
    },
  });

  // ピンとinfoWindow設定
  const latLngs = [];
  const markers = [];
  const infoWindows = [];
  latlngsArray.forEach( (latlng, i) => {
    latLngs[i] = { lat: latlng[0], lng: latlng[1] }
    markers[i] = new google.maps.Marker({
      position: latLngs[i],
      map: main_map
    });
    infoWindows[i] = new google.maps.InfoWindow({
      content: document.getElementById(`micropost-${idsArray[i]}`).innerHTML
    });
    markers[i].addListener('click', ()=> {
      for ( infoWindow of infoWindows ) {
        infoWindow.close();
      }
      main_map.panTo(latLngs[i]);
      infoWindows[i].open(main_map, markers[i]);
    });
    markers[i].addListener('rightclick', ()=> {
      main_map.panTo(latLngs[i]);
      main_map.setZoom(10);
    });
  });
  main_map.addListener('click', ()=> {
    for ( infoWindow of infoWindows ) {
      infoWindow.close();
    }
  });

  // 検索機能設定
  const input = document.getElementById("autocomplete");
  main_map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  const autocomplete = new google.maps.places.Autocomplete(
    input,
    {
      // types: ['establishment'],
      fields: ["geometry", "name"],
      componentRestrictions: {country: 'jp'}
    }
  );
  places = new google.maps.places.PlacesService(main_map);
  autocomplete.addListener("place_changed", onPlaceChanged);
  function onPlaceChanged() {
    const place = autocomplete.getPlace();
    if (place.geometry) {
      main_map.panTo(place.geometry.location);
      main_map.setZoom(15);
    } else {
      input.placeholder = "検索";
    }
  }

  // 全体ボタン設定
  const set_init = document.getElementById('set-init');
  main_map.controls[google.maps.ControlPosition.BOTTOM].push(set_init);
  google.maps.event.addDomListener(set_init, 'click', ()=> {
    main_map.panTo(init_center);
    main_map.setZoom(5);
  });

  // 現在地ボタン設定
  const locationButton = document.getElementById('location-button');
  main_map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(locationButton);
  new locationControl(locationButton, main_map);

  function locationControl(buttonDiv, map) {
    google.maps.event.addDomListener(buttonDiv, "click", function() {
      const infoWindow = new google.maps.InfoWindow; 
      
      // ブラウザが Geolocation に対応しているかを判定
      // 対応していない場合の処理
      if(!navigator.geolocation){ 
        infoWindow.setPosition(map.getCenter());
        infoWindow.setContent('Geolocation に対応していません。');
        infoWindow.open(map);
      }
      
      // ブラウザが対応している場合、position にユーザーの位置情報が入る
      navigator.geolocation.getCurrentPosition(
        
        // [第1引数] 取得に成功した場合の関数
        function(position) { 
        let pos = {  
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        };
        infoWindow.setPosition(pos);
        infoWindow.setContent('現在位置を取得しました。');
        infoWindow.open(map);
        map.setCenter(pos);
        map.setZoom(12);
      }, 
      
      // [第2引数] 取得に失敗した場合の関数
      function(error) {

        let errorInfo = [
          "原因不明のエラーが発生しました。" ,
          "位置情報の取得が許可されませんでした。" ,
          "電波状況などで位置情報が取得できませんでした。" ,
          "位置情報の取得に時間がかかり過ぎてタイムアウトしました。"
        ];
        let errorNo = error.code ;
        let errorMessage = "[エラー番号: " + errorNo + "]\n" + errorInfo[ errorNo ] ;
        alert( errorMessage ) ;
      },

      // [第3引数] オプション
      {
        "enableHighAccuracy": false,
        "timeout": 4000,
        "maximumAge": 2000,
      });
    });
  }
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?language=ja&region=JP&key=AIzaSyCIX7ci0yBU4r9axzQEvNd5nefZiifw1bM&libraries=places&callback=mainMap" async defer></script>