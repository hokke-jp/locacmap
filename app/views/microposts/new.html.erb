<% provide(:title, "投稿作成") %>

<input id="autocomplete" size="50" class="mt-4 ml-4 h-6 w-48 text-base rounded-sm shadow" type="search" placeholder="検索" />
<div class="max-w-5xl h-64">
  <div id="post_map"></div>
</div>
<div class="w-4/5 mx-auto my-10">
  <div class="max-w-sm mx-auto">
    <%= render 'shared/micropost_form' %>
  </div>
</div>



<script>
let map;
let marker;
let infoWindow;
let autocomplete;
function postMap() {
  marker = new google.maps.Marker();
  const target = document.getElementById('post_map');
  const empire = {lat: 37, lng: 140};
  
  map = new google.maps.Map(target, {
    center: empire,
    zoom: 5,
    zoomControl: false,
    mapTypeControl: false,
    streetViewControl: false,
    mapTypeControlOptions: {
      style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
    },
    restriction: {
      latLngBounds: {
        north: 48.0,
        south: 20.0,
        west: 125.0,
        east: 150.0
      },
      strictBounds: false
    },
  });
  console.log('Google Maps API version: ' + google.maps.version);



  let geocoder = new google.maps.Geocoder();  
  //マップにリスナーを設定
  map.addListener('click', function(e){
    //リバースジオコーディングでは location を指定
    geocoder.geocode({location: e.latLng}, function(results, status){
      if(status === 'OK' && results[0]) {

        let formatted_address = results[0].formatted_address;
        let address_components = results[0].address_components;

        let rets = results[0].address_components.filter(function(component) {
          return component.types.indexOf("administrative_area_level_1") > -1;
        });
        console.log(rets[0].long_name);
        console.log(formatted_address);
        console.log(results[0].geometry.location);
        const location = results[0].geometry.location;
        console.log(location);

        //マーカーの生成
        if (marker){marker.setMap(null)};
        marker = new google.maps.Marker({
          position: e.latLng,
          map: map,
          title: formatted_address,
          animation: google.maps.Animation.DROP
        });
        
        //情報ウィンドウの生成
        infoWindow = new google.maps.InfoWindow({
          content: formatted_address,
          pixelOffset: new google.maps.Size(0, 5)
        });

        //マーカーにリスナーを設定
        marker.addListener('click', function(){
          infoWindow.open(map, marker);
        });
        
        //情報ウィンドウリスナーを設定
        infoWindow.addListener('closeclick', function(){
          marker.setMap(null);  //マーカーを削除
        });

        document.getElementById( "micropost_latlng" ).value = String(e.latLng);
        console.log(typeof(String(e.latLng)));
        console.log(typeof(e.latLng));
        console.log(e.latLng);
        console.log(e.latLng["lat"]);
        console.log(Object.values(e.latLng["lat"]));

        function change_pulldown(){
          pulldown_option = document.getElementById("micropost_prefecture_id").getElementsByTagName('option');
          for(i=0; i<pulldown_option.length; i++){
            if(pulldown_option[i].innerHTML == rets[0].long_name){
              pulldown_option[i].selected = true;
              break;
            }
          }
        }
        change_pulldown();

      }else if(status === 'ZERO_RESULTS') {
        alert('不明なアドレスです： ' + status);
        return;
      }else{
        alert('失敗しました： ' + status);
        return;
      }
    });
  });



  // Create the autocomplete object and associate it with the UI input control.
  // Restrict the search to the default country, and to place type "cities".
  const input = document.getElementById("autocomplete");
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  autocomplete = new google.maps.places.Autocomplete(
    input,
    {
      types: ["(cities)"],
      // componentRestrictions: countryRestrict,
    }
  );
  places = new google.maps.places.PlacesService(map);
  autocomplete.addListener("place_changed", onPlaceChanged);



  // 現在地取得用のボタン作成
  const locationButtonDiv = document.createElement("div");
  locationButtonDiv.setAttribute('id', "locationButtonDiv");
  const locationButton = new locationControl(locationButtonDiv, map);
  
  locationButtonDiv.index = 1;
  map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(locationButtonDiv);
}


// When the user selects a city, get the place details for the city and
// zoom the map in on the city.
function onPlaceChanged() {
  const place = autocomplete.getPlace();

  if (place.geometry) {
    map.panTo(place.geometry.location);
    map.setZoom(15);
  } else {
    input.placeholder = "Enter a city";
  }
}


function locationControl(buttonDiv, map) {
  let buttonUI = document.createElement("div");

  // ボタンスタイル
  buttonUI.style.width = "80px";
  buttonUI.style.height = "40px";
  buttonUI.style.backgroundColor = "white";
  buttonUI.style.color = "black";
  buttonUI.style.textAlign = "center";
  buttonUI.style.fontSize = "18px";
  buttonUI.style.lineHeight = "35px";
  buttonUI.style.borderRadius = "2px";
  buttonUI.style.padding = "3px";
  buttonUI.style.boxShadow = "rgba(0, 0, 0, 0.3) 0px 1px 4px -1px";
  
  // buttonUI.setAttribute('class', 'btn');
  buttonUI.innerHTML = "現在地";

  buttonDiv.style.marginBottom = "10px";
  buttonDiv.style.marginRight = "10px";
  buttonDiv.style.cursor = "pointer";
  buttonDiv.appendChild(buttonUI);
  
  google.maps.event.addDomListener(buttonDiv, "click", function() {
    infoWindow = new google.maps.InfoWindow; 
    
    //ブラウザが Geolocation に対応しているかを判定
    //対応していない場合の処理
    if(!navigator.geolocation){ 
      //情報ウィンドウの位置をマップの中心位置に指定
      infoWindow.setPosition(map.getCenter());
      //情報ウィンドウのコンテンツを設定
      infoWindow.setContent('Geolocation に対応していません。');
      //情報ウィンドウを表示
      infoWindow.open(map);
    }
    
    //ブラウザが対応している場合、position にユーザーの位置情報が入る
    navigator.geolocation.getCurrentPosition(
      
      // [第1引数] 取得に成功した場合の関数
      function(position) { 
      //position から緯度経度（ユーザーの位置）のオブジェクトを作成し変数に代入
      let pos = {  
        lat: position.coords.latitude,
        lng: position.coords.longitude,
      };
      //情報ウィンドウに現在位置を指定
      infoWindow.setPosition(pos);
      //情報ウィンドウのコンテンツを設定
      infoWindow.setContent('現在位置を取得しました。');
      //情報ウィンドウを表示
      infoWindow.open(map);
      //マップの中心位置を指定
      map.setCenter(pos);
      //マップのzoomを設定
      map.setZoom(12);
    }, 
    
    // [第2引数] 取得に失敗した場合の関数
    function(error) {
      // エラーコード(error.code)の番号
      // 0:UNKNOWN_ERROR        原因不明のエラー
      // 1:PERMISSION_DENIED      利用者が位置情報の取得を許可しなかった
      // 2:POSITION_UNAVAILABLE   電波状況などで位置情報が取得できなかった
      // 3:TIMEOUT          位置情報の取得に時間がかかり過ぎた…

      // エラー番号に対応したメッセージ
      let errorInfo = [
        "原因不明のエラーが発生しました。" ,
        "位置情報の取得が許可されませんでした。" ,
        "電波状況などで位置情報が取得できませんでした。" ,
        "位置情報の取得に時間がかかり過ぎてタイムアウトしました。"
      ];
      // エラー番号
      var errorNo = error.code ;
      // エラーメッセージ
      var errorMessage = "[エラー番号: " + errorNo + "]\n" + errorInfo[ errorNo ] ;
      // アラート表示
      alert( errorMessage ) ;
    },

    // [第3引数] オプション
    {
      "enableHighAccuracy": false,
      "timeout": 8000,
      "maximumAge": 2000,
    });
  });
}
</script> 


<script src="https://maps.googleapis.com/maps/api/js?language=ja&region=JP&key=AIzaSyCIX7ci0yBU4r9axzQEvNd5nefZiifw1bM&libraries=places&callback=postMap" async defer></script>

