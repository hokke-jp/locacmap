<% provide(:title, "投稿作成") %>

<!-- マップ描画 -->
<div class="h-70vw max-h-504px max-w-4xl mt-10 mx-auto border border-gray-400">
  <div id="post_map" style="height: 100%; width: 100%"></div>
</div>
<!-- マップに入れるHTML -->
<input id="autocomplete" size="50" class="mt-4 ml-4 h-6 w-48 rounded-sm shadow text-base" type="search" placeholder="検索" />
<div id="init-position" class="map-btn m-6 sm:m-3">全体</div>
<div id="location-button" class="map-btn m-3">現在地</div>
<!-- 投稿記入フォーム -->
<div class="mt-10 mb-40 px-3">
  <%= render 'shared/micropost_form' %>
</div>



<script>
function postMap() {
  // マップ表示
  const target = document.getElementById('post_map');
  const empire = {lat: 37, lng: 138};
  const map = new google.maps.Map(target, {
    center: empire,
    zoom: 5,
    zoomControl: false,
    mapTypeControl: false,
    streetViewControl: false,
    mapTypeControlOptions: {
      style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
    },
    restriction: {
      latLngBounds: {
        north: 57.0,
        south: 18.0,
        west: 100.0,
        east: 180.0
      },
      strictBounds: false
    },
  });


  // マップクリック時のアクション設定
  let infoWindow;
  let marker = new google.maps.Marker();
  let geocoder = new google.maps.Geocoder();  
  map.addListener('click', function(e){
    geocoder.geocode({location: e.latLng}, function(results, status){
      if(status === 'OK' && results[0]) {

        let formatted_address = results[0].formatted_address;
        let address_components = results[0].address_components;

        let rets = results[0].address_components.filter(function(component) {
          return component.types.indexOf("administrative_area_level_1") > -1;
        });
        const location = results[0].geometry.location;

        // マーカーの生成
        if (marker){ marker.setMap(null) };
        marker = new google.maps.Marker({
          position: e.latLng,
          map: map,
          title: formatted_address,
          animation: google.maps.Animation.DROP
        });
        
        // 情報ウィンドウの生成
        infoWindow = new google.maps.InfoWindow({
          content: formatted_address
        });

        // マーカーにリスナーを設定
        marker.addListener('click', function(){
          infoWindow.open(map, marker);
        });
        
        // 情報ウィンドウリスナーを設定
        infoWindow.addListener('closeclick', function(){
          marker.setMap(null);
        });

        document.getElementById( "micropost_latlng" ).value = String(e.latLng);

        // クリック地点の都道府県をセレクトボックスに入力
        function change_pulldown(){
          pulldown_option = document.getElementById("micropost_prefecture_id").getElementsByTagName('option');
          for(i=0; i<pulldown_option.length; i++){
            if(pulldown_option[i].innerHTML == rets[0].long_name){
              pulldown_option[i].selected = true;
              break;
            }
          }
        }
        change_pulldown();

      }else if(status === 'ZERO_RESULTS') {
        alert('不明なアドレスです： ' + status);
        return;
      }else{
        alert('失敗しました： ' + status);
        return;
      }
    });
  });


  // 検索機能設定
  const input = document.getElementById("autocomplete");
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  const autocomplete = new google.maps.places.Autocomplete(
    input,
    {
      fields: ["geometry", "name"],
      componentRestrictions: {country: 'jp'}
    }
  );
  places = new google.maps.places.PlacesService(map);
  autocomplete.addListener("place_changed", onPlaceChanged);

  function onPlaceChanged() {
    const place = autocomplete.getPlace();

    if (place.geometry) {
      map.panTo(place.geometry.location);
      map.setZoom(15);
    } else {
      input.placeholder = "検索";
    }
  }


  // 全体ボタン設定
  const init_position = document.getElementById('init-position');
  map.controls[google.maps.ControlPosition.BOTTOM].push(init_position);
  google.maps.event.addDomListener(init_position, 'click', ()=> {
    map.panTo(empire);
    map.setZoom(5);
  });


  // 現在地ボタン設定
  const locationButton = document.getElementById('location-button');
  map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(locationButton);
  new locationControl(locationButton, map);

  function locationControl(buttonDiv, map) {
    google.maps.event.addDomListener(buttonDiv, "click", function() {
      const infoWindow = new google.maps.InfoWindow; 
      
      // ブラウザが Geolocation に対応しているかを判定
      // 対応していない場合の処理
      if(!navigator.geolocation){ 
        infoWindow.setPosition(map.getCenter());
        infoWindow.setContent('Geolocation に対応していません。');
        infoWindow.open(map);
      }
      
      // ブラウザが対応している場合、position にユーザーの位置情報が入る
      navigator.geolocation.getCurrentPosition(
        
        // [第1引数] 取得に成功した場合の関数
        function(position) { 
        let pos = {  
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        };
        infoWindow.setPosition(pos);
        infoWindow.setContent('現在位置を取得しました。');
        infoWindow.open(map);
        map.setCenter(pos);
        map.setZoom(12);
      }, 
      
      // [第2引数] 取得に失敗した場合の関数
      function(error) {

        let errorInfo = [
          "原因不明のエラーが発生しました。" ,
          "位置情報の取得が許可されませんでした。" ,
          "電波状況などで位置情報が取得できませんでした。" ,
          "位置情報の取得に時間がかかり過ぎてタイムアウトしました。"
        ];
        let errorNo = error.code ;
        let errorMessage = "[エラー番号: " + errorNo + "]\n" + errorInfo[ errorNo ] ;
        alert( errorMessage ) ;
      },

      // [第3引数] オプション
      {
        "enableHighAccuracy": false,
        "timeout": 4000,
        "maximumAge": 2000,
      });
    });
  }
}
</script> 
<script src="https://maps.googleapis.com/maps/api/js?language=ja&region=JP&key=AIzaSyCIX7ci0yBU4r9axzQEvNd5nefZiifw1bM&libraries=places&callback=postMap" async defer></script>
